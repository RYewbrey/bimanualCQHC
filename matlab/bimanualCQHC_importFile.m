function D=bimanualCQHC_importFile(fileIn)
% D=bimanualCQHC_importFile(fileIn)
% Import data from CSV file collected by psychoPy (bimanualCQ_probeUnused)
% called by bimanualCQHC_ana's 'loadData' case
% Input:
%   fileIn - .csv file to be read in (generated by psychoPy)
%
% Foundation written by K. Kornysheva, September 2021
% Adjusted and expanded by R. Yewbrey, 2022-2023

% In tbl format
tbl = readtable(fileIn);

%%% Convert from tbl to output type, acts as preallocation
%participant info
participant = tbl.participant;
day = tbl.day;
date = tbl.date;
seqSet = tbl.seqSet;

%conditions
trialType = grp2idx(tbl.trialType); %1: InstructedB, 2: Probe, 3: MemoryB
fractal = grp2idx(tbl.fractalIm); % 1: fractal_1, 2: Fractal_8
probeTargetPos=tbl.mapping; %% NOTE: this data is offset by one row!!!

%response data
RTs         = cellfun(@str2num, tbl.RTs, 'UniformOutput', false);%turns RTs from strings in cells to nums in cells %%%% REMOVE IF ABOVE WORKS %%%%
Digits      = cellfun(@str2num, tbl.Digits, 'UniformOutput', false); %^
points      = tbl.finalPoints;
respList    = tbl.respList;
corAnsList  = tbl.corAnsList;

%trial progress
trialNBlock = tbl.trials_thisTrialN;

%%% Write into the output structure D, acts as preallocation
maxpress=4;%number of presses in production trials
D.subjID=nan(size(day,1),1);                %subjID         - participant ID number
D.date=cell(size(RTs,1),1);                 %date           - date completed
D.day=nan(size(day,1),1);                   %day            - day 1/2/3
D.BN=nan(size(day,1),1);                    %BN             - block number within days
D.TN=nan(size(day,1),1);                    %TN             - trial number within days
D.TNBlock=nan(size(day,1),1);               %TNBlock        - trial number within blocks
D.seqSet=nan(size(day,1),1);                %seqSet         - set 1 or 2
D.trialType=nan(size(day,1),1);             %trialType      - 1: InstructedB; 2: Probe 3: MemoryB
D.fractal=nan(size(day,1),1);               %fractal        - sequence 1/2
D.RT=nan(size(day,1),maxpress);             %RT             - time of each press rel to go
D.press=nan(size(day,1),maxpress);          %press          - target presses, 1:4
D.response=cell(size(day,1),maxpress);      %response       - actual presses, 1:4
D.error=nan(size(day,1),maxpress);          %error          - errors = 1
D.probeTargetPos=nan(size(day,1),1);        %probeTargetPos - probe position in sequence
D.points=nan(size(day,1),1);                %points         - points scored
D.bimanResponse=cell(size(day,1),maxpress); %response       - actual presses, 1:8 (right hand 1:4, left 5:8)
D.bimanPress=cell(size(day,1),maxpress);    %bimanPress     - target presses, 1:8 (right hand 1:4, left 5:8)
D.responseKey=cell(size(day,1),maxpress);   %responseKey    - actual presses (specific keys e.g. 'u', 'r')
D.pressKey=cell(size(day,1),maxpress);      %bimanPressKey  - target presses (specific keys)
D.taskBug = zeros(size(day,1),1);           %taskBug        - bug in task causes some instructed & memory 
                                            %                 trials to have fewer than 4 target presses
%Add variable to count through blocks as we loop through trials
blockCounter = 0; %a TN of 0 indicates a new block

for i=1:size(D.RT,1) %for trials, adding data to D struct as it goes
    
    if ~isnan(points(i,1)) %if the trial actually has data (not nan)
        
        %Write out variables with length of 1:
        D.subjID(i)         = participant(i);
        D.date{i}           = date(i);
        D.day(i)            = sscanf(day{i},'%*[^0123456789]%f');
        D.TNBlock(i)        = trialNBlock(i) + 1; %psychoPy uses 0 indexing, so add 1 to TN
        if D.TNBlock(i) == 1 %increase block counter if TNBlock is 1
            blockCounter = blockCounter + 1;
        end
        D.BN(i)             = blockCounter;
        D.seqSet(i,1)       = sscanf(seqSet{i},'%*[^0123456789]%f');
        D.trialType(i,:)    = trialType(i);
        D.fractal(i,:)      = fractal(i);
        D.points(i,1)       = points(i);
        D.probeTargetPos(i) = probeTargetPos(i-1); %NOTE: this data is offset by one row
        
        
        %Write out data values from strings for vectors of different length:
        try %Trials with exactly 4 presses
            
            D.RT(i,:)               = RTs{i,1};
            D.press(i,:)            = Digits{i,1};
            D.responseKey(i,:)      = extractBetween(respList{i},'"','"')';
            D.pressKey(i,:)         = extractBetween(corAnsList{i},'"','"')';
            D.response(i,:)         = D.responseKey(i,:);%for now, response is just the key letters. Later we convert to 1:4 within hands
            D.bimanResponse(i,:)    = D.responseKey(i,:);%as above
            D.bimanPress(i,:)       = D.pressKey(i,:);   %^
            
        catch % < 4 presses or single press
            
            D.RT(i,1:numel(RTs{i,1}))       = RTs{i,1};
            D.press(i,1:numel(Digits{i,1})) = Digits{i,:};
            D.responseKey(i,1:numel(extractBetween(respList{i},'"','"')')) = extractBetween(respList{i},'"','"')';
            D.pressKey(i,1:numel(extractBetween(corAnsList{i},'"','"')'))  = extractBetween(corAnsList{i},'"','"')';
            D.response(i,1:numel(D.responseKey(i,:)))      = D.responseKey(i,:);%for now, response is just the key letters. Later we convert to 1:4 within hands
            D.bimanResponse(i,1:numel(D.responseKey(i,:))) = D.responseKey(i,:);%as above
            D.bimanPress(i,1:numel(D.pressKey(i,:)))       = D.pressKey(i,:);   %^
            
        end%variable press number try catch
        
        %On some trials, an unidentified bug in the code meant that
        %instructed & memory trials had fewer than 4 target presses. Here
        %we identify trials where the target press number is wrong and mark
        %them as bugged with variable D.taskBug & exclude during analysis
        if D.trialType(i) == 1 || D.trialType(i) == 3
            D.taskBug(i) = sum(~cellfun(@isempty,D.pressKey(i,:))) ~=4; %find where there aren't 4 presses
        end
        
    end%if the trial actually has data (not nan)
end%for trials


%%% Clean-up:
numrow=(isnan(D.points)); %1: no trial data; 0: trial data

%use numrow variable to exclude rows which contain no data
D.subjID(numrow==1,:)        =[];
D.day(numrow==1,:)           =[];
D.date                       = D.date(~cellfun(@isempty, D.date(:,1)), :);
D.TNBlock(numrow==1,:)       =[];
D.BN(numrow==1,:)            =[];
D.seqSet(numrow==1,:)        =[];
D.trialType(numrow==1,:)     =[];
D.fractal(numrow==1,:)       =[];
D.RT(numrow==1,:)            =[];
D.press(numrow==1,:)         =[];
D.responseKey(numrow==1,:)   =[];
D.pressKey(numrow==1,:)      =[];
D.response(numrow==1,:)      =[];
D.bimanResponse(numrow==1,:) =[];
D.bimanPress(numrow==1,:)    =[];
D.error(numrow==1,:)         =[];
D.points(numrow==1,:)        =[];
D.probeTargetPos(numrow==1,:)=[];
D.taskBug(numrow==1,:)       =[];


%%% Remove copies of 1st press in col 2-4 (Probe trials cond = 2)
cond=2;
D.RT(D.trialType==cond,2:4)           = NaN;
D.press(D.trialType==cond,2:4)        = NaN;
D.error(D.trialType==cond,2:4)        = NaN;
D.responseKey(D.trialType == 2,2:4)   = {[]};
D.pressKey(D.trialType == 2,2:4)      = {[]};
D.response(D.trialType == 2,2:4)      = {[]};
D.bimanResponse(D.trialType == 2,2:4) = {[]};
D.bimanPress(D.trialType == 2,2:4)    = {[]};


%%%Transform response & press variables from key letter presses to numbers
D.response(strcmp(D.response, 'r')) = {1};              D.response(strcmp(D.response, 'y')) = {1};
D.response(strcmp(D.response, 'e')) = {2};              D.response(strcmp(D.response, 'u')) = {2};
D.response(strcmp(D.response, 'w')) = {3};              D.response(strcmp(D.response, 'i')) = {3};
D.response(strcmp(D.response, 'a')) = {4};              D.response(strcmp(D.response, 'l')) = {4};
D.response(cellfun(@isempty,D.response)) = {NaN}; %turn empty values into NaNs
D.response = cell2mat(D.response); %convert from cell to double

D.bimanResponse(strcmp(D.bimanResponse, 'r')) = {5};    D.bimanResponse(strcmp(D.bimanResponse, 'y')) = {1};
D.bimanResponse(strcmp(D.bimanResponse, 'e')) = {6};    D.bimanResponse(strcmp(D.bimanResponse, 'u')) = {2};
D.bimanResponse(strcmp(D.bimanResponse, 'w')) = {7};    D.bimanResponse(strcmp(D.bimanResponse, 'i')) = {3};
D.bimanResponse(strcmp(D.bimanResponse, 'a')) = {8};    D.bimanResponse(strcmp(D.bimanResponse, 'l')) = {4};
D.bimanResponse(cellfun(@isempty,D.bimanResponse)) = {NaN}; %turn empty values into NaNs
D.bimanResponse = cell2mat(D.bimanResponse); %convert from cell to double

D.bimanPress(strcmp(D.bimanPress, 'r')) = {5};          D.bimanPress(strcmp(D.bimanPress, 'y')) = {1};
D.bimanPress(strcmp(D.bimanPress, 'e')) = {6};          D.bimanPress(strcmp(D.bimanPress, 'u')) = {2};
D.bimanPress(strcmp(D.bimanPress, 'w')) = {7};          D.bimanPress(strcmp(D.bimanPress, 'i')) = {3};
D.bimanPress(strcmp(D.bimanPress, 'a')) = {8};          D.bimanPress(strcmp(D.bimanPress, 'l')) = {4};
D.bimanPress(cellfun(@isempty,D.bimanPress)) = {NaN}; %turn empty values into NaNs
D.bimanPress = cell2mat(D.bimanPress); %convert from cell to double


%%%Define errors based on response equalling press
nanresponse = isnan(D.bimanResponse); nanpress = isnan(D.press); %we want to ignore NaNs as matlab considers them different
D.error = D.bimanResponse == D.bimanPress | nanresponse & nanpress;
D.error = ~D.error; %is there an error in the press? if so, 1
errorSum = sum(D.error,2);
D.errorTrial = errorSum ~= 0; %is there an error in the trial? if so, 1

D.TN= (1:size(D.RT,1))';

disp(D)